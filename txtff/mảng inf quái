function deepCopy(obj) {
    if (obj === null || typeof obj !== 'object') {
        return obj; // Kh√¥ng sao ch√©p n·∫øu l√† gi√° tr·ªã c∆° b·∫£n
    }

    if (Array.isArray(obj)) {
        return obj.map(deepCopy); // Sao ch√©p m·∫£ng
    }

    const copiedObj = {};
    for (let key in obj) {
        if (obj.hasOwnProperty(key)) {
            copiedObj[key] = deepCopy(obj[key]); // ƒê·ªá quy sao ch√©p c√°c thu·ªôc t√≠nh
        }
    }
    return copiedObj;
}
var a = 1; // Map hi·ªán t·∫°i
let monsInF = {
    1: {
        'qu·∫ßn_th·ªÉ_1': {
            name: 'L√≠nh M·ªπ',
            level: null,
            _level() {
                if (this.level === null) {
                    this.level = Math.floor(Math.random() * 3) + 1; // Random t·ª´ 1 ƒë·∫øn 3 m·ªôt l·∫ßn
                }
                return this.level;
            },
            idle: 'idle',
            idleCloth: 'idleCloth',
            run: 'run',
            runCloth: 'runCloth',
            num: 2, // S·ªë l∆∞·ª£ng qu√°i
            mi() {
                return this.level;
            },
        },
        'qu·∫ßn_th·ªÉ_2': {
            name: 'tay sai cho M·ªπ',
            level: null,
            _level() {
                if (this.level === null) {
                    this.level = Math.floor(Math.random() * 3) + 3; // Random t·ª´ 3 ƒë·∫øn 5 m·ªôt l·∫ßn
                }
                return this.level;
            },
            idle: 'idle',
            idleCloth: 'idleCloth',
            run: 'run',
            runCloth: 'runCloth',
            num: 7, // S·ªë l∆∞·ª£ng qu√°i
            mi() {
                return this.level;
            },
        }
    }
};

// M·∫£ng ch·ª©a t·∫•t c·∫£ c√°c qu√°i v·∫≠t ƒë∆∞·ª£c t·∫°o
let createdMonsters = [];

// H√†m t·∫°o qu√°i v·∫≠t
function createMonsters(map) {
    const currentMap = monsInF[map];
    for (const groupKey in currentMap) {
        const group = currentMap[groupKey];
        for (let i = 0; i < group.num; i++) {
            // T·∫°o qu√°i v·∫≠t m·ªõi v·ªõi thu·ªôc t√≠nh v√† ph∆∞∆°ng th·ª©c ri√™ng bi·ªát
            const monster = {
                name: group.name,
                level: deepCopy(group)._level(), // L·∫•y level t·ª´ getter
                idle: group.idle,
                idleCloth: group.idleCloth,
                run: group.run,
                runCloth: group.runCloth,
                mi() {
                    return this.level;
                }
            };
            createdMonsters.push(monster); // L∆∞u qu√°i v·∫≠t v√†o m·∫£ng
        }
    }
}

// G·ªçi h√†m ƒë·ªÉ t·∫°o qu√°i v·∫≠t
createMonsters(a);

// Ki·ªÉm tra k·∫øt qu·∫£
console.log(createdMonsters);

// Ki·ªÉm tra ph∆∞∆°ng th·ª©c mi c·ªßa t·ª´ng qu√°i v·∫≠t
createdMonsters.forEach(monster => {
    console.log(`${monster.name} c√≥ level: ${monster.mi()}`); // S·ª≠ d·ª•ng d·∫•u ` ƒë·ªÉ t·∫°o template string
});

// getBox(tile.id).classList.replace(getBox(tile.id).classList[0], cls)



// map
const map = this.add.image(0, 0, 'mapTexture').setOrigin(0, 0);
map.setScale(2000 / map.width, 2000 / map.height);



ch·∫≥ng l·∫Ω map2000 2000px l√† t v·∫Ω 2000 2000 √†
ChatGPT ƒë√£ n√≥i:
ChatGPT
Kh√¥ng c·∫ßn v·∫Ω th·ªß c√¥ng b·∫£n ƒë·ªì 2000x2000px! üöÄ
B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng Tilemap ho·∫∑c Scale ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì l·ªõn m√† kh√¥ng c·∫ßn ·∫£nh qu√° l·ªõn.

1Ô∏è‚É£ C√°ch 1: Scale h√¨nh ·∫£nh b·∫£n ƒë·ªì
N·∫øu ·∫£nh c·ªßa b·∫°n nh·ªè h∆°n 2000x2000px, b·∫°n c√≥ th·ªÉ ph√≥ng to n√≥ l√™n:

javascript
Sao ch√©p
Ch·ªânh s·ª≠a
const map = this.add.image(0, 0, 'mapTexture').setOrigin(0, 0);
map.setScale(2000 / map.width, 2000 / map.height);
üí° Gi·∫£i th√≠ch:

map.width v√† map.height l√† k√≠ch th∆∞·ªõc g·ªëc c·ªßa ·∫£nh.
setScale(2000 / map.width, 2000 / map.height) gi√∫p ·∫£nh ph·ªß to√†n b·ªô v√πng 2000x2000.
2Ô∏è‚É£ C√°ch 2: D√πng Tilemap (Tiled Map)
C√°ch n√†y gi√∫p b·∫°n t·∫°o b·∫£n ƒë·ªì l·ªõn t·ª´ nhi·ªÅu √¥ nh·ªè, t·ªëi ∆∞u h∆°n khi x·ª≠ l√Ω.

üîπ B∆∞·ªõc 1: T·∫£i b·∫£n ƒë·ªì Tiled (JSON + Tileset)

javascript
Sao ch√©p
Ch·ªânh s·ª≠a
this.load.tilemapTiledJSON('map', 'assets/map.json');
this.load.image('tiles', 'assets/tileset.png'); 
üîπ B∆∞·ªõc 2: T·∫°o b·∫£n ƒë·ªì t·ª´ Tileset

javascript
Sao ch√©p
Ch·ªânh s·ª≠a
const map = this.make.tilemap({ key: 'map' });
const tileset = map.addTilesetImage('tilesetName', 'tiles');
const layer = map.createLayer('layerName', tileset, 0, 0);
üí° ∆Øu ƒëi·ªÉm c·ªßa Tilemap:
‚úî Kh√¥ng c·∫ßn ·∫£nh si√™u l·ªõn.
‚úî Ch·ªâ render ph·∫ßn b·∫£n ƒë·ªì c·∫ßn thi·∫øt (t·ªëi ∆∞u hi·ªáu su·∫•t).
‚úî C√≥ th·ªÉ t·∫°o map linh ho·∫°t t·ª´ nhi·ªÅu √¥ nh·ªè.

3Ô∏è‚É£ C√°ch 3: L·∫∑p h√¨nh ·∫£nh (Tile Sprite)
N·∫øu mu·ªën b·∫£n ƒë·ªì l·∫∑p l·∫°i thay v√¨ ·∫£nh si√™u l·ªõn:

javascript
Sao ch√©p
Ch·ªânh s·ª≠a
const map = this.add.tileSprite(0, 0, 2000, 2000, 'mapTexture').setOrigin(0, 0);
üí° Tile Sprite gi√∫p b·∫°n t·∫°o hi·ªáu ·ª©ng n·ªÅn l·∫∑p l·∫°i, kh√¥ng c·∫ßn ·∫£nh si√™u l·ªõn.

üî• T√≥m l·∫°i:

·∫¢nh nh·ªè ‚Üí Scale (setScale()).
·∫¢nh l·ªõn ‚Üí Tilemap (tilemapTiledJSON).
N·ªÅn l·∫∑p ‚Üí Tile Sprite (tileSprite()).
B·∫°n mu·ªën c√°ch n√†o? üöÄ